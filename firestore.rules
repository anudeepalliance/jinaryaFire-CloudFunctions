rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
     //Rules for the User Document
    match /Users/{uid} {
    	//Users can read data about all other users
    	allow read: if request.auth != null;
      //Users can edit data if it is their own data
      allow write: if request.auth.uid == uid;

    //Rules for the User Profile Document
    match /ProfileInfo/{againUid} {
    	//Users can read data about all other users
    	allow read: if request.auth != null
      //Users can edit data if it is their own data
      allow write: if request.auth.uid == uid;
    }

    match /whatsNewRecords/totalNoOfWhatsNewItems {
      allow create: if request.resource.data.keys().hasOnly(['totalNoOfWhatsNewItems'])
      //users are allows to read their totalNoOfWhatsNewItems Document
      allow read: if request.auth != null;
    }

    match /whatsNewRecords/noOfFollowedPersonUnReadWhatsNewItems {
      allow create: if request.resource.data.keys().hasOnly(['noOfFollowedPersonUnReadWhatsNewItems'])
      //users are allowed to update how many unRead WhatsNewItems they have
      allow update: if request.auth.uid == uid;
      //users are allows to read their noOfUnReadWhatsNewItems Document
      allow read: if request.auth.uid == uid;
    }

    match /whatsNew/{whatsNewDocId} {
      allow update: if request.auth.uid == uid && isUpdatingOnlyNoOfLikesUserLikedInWhatsNewDoc() || 
      isUpdatingIsFollowingOrHasReadField();
      //users are allows to read their WhatsNew Documents
      allow read: if request.auth.uid == uid;
      //allow user to delete a whatsNewDoc only if the content type is poke for insights
      allow delete: if request.auth.uid == uid; 
    }

    //In whatsNewSubColl check if user is updating only 
    //noOfLikes, userLiked fields
    function isUpdatingOnlyNoOfLikesUserLikedInWhatsNewDoc() {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(['noOfLikes', 'userLiked'])
    }

    //In whatsNewSubColl check if user is updating only 
    //hasRead, isFollowing fields
    function isUpdatingIsFollowingOrHasReadField() {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(['hasRead','isFollowing']);
    }

    function noOfLikesIsGreaterOrLessThanByOne() {
      return request.resource.data.noOfLikes == resource.data.noOfLikes + 1 || 
      request.resource.data.noOfLikes == resource.data.noOfLikes - 1;
    }

    // function noOfLikesIsGreaterOrLessThanByOneOrUnchanged() {
    //   return 
    //   request.resource.data.noOfLikes == resource.data.noOfLikes + 1 || 
    //   request.resource.data.noOfLikes == resource.data.noOfLikes - 1 || 
    //   request.resource.data.noOfLikes == resource.data.noOfLikes;
    // }

    function noOfViewsIsGreaterOrLessThanByOne() {
      return 
      request.resource.data.noOfViews == resource.data.noOfViews + 1 || 
      request.resource.data.noOfViews == resource.data.noOfViews - 1;
    }
      
      match /following/{followingPersonUid} {
        //everybody is allowed to see everyone else's following
        allow read: if true;
      //Only the user is authorised to create
      //& delete to his following sub-collection
      allow create, delete: if request.auth.uid == uid;
      //allow update if user is trying to update just the number of compliments sent field
      allow update: if isUpdatingOnlyNoOfCompsSentOrComplimentSentAtOrInterestMeter();
      }
    
    
    function isUpdatingOnlyNoOfCompsSentOrComplimentSentAtOrInterestMeter() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['noOfComplimentsSent','complimentSentAt','interestMeter']) 
      // || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['complimentSentAt']) 
      // || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['interestMeter'])
    }

    //custom function to check if client is trying to update anything other 
    //than followingBack field at FollowerPerson Doc
    function isUpdatingOnlyFollowingBackField() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followingBack']);
    }

      
      match /followers/{followerPersonUid} {
        //everybody is allowed to see everyone else's followers
        allow read: if true;
        //Only the user is authorised to create
        //& delete and add to his followers sub-collection
        allow create, delete: if request.auth.uid == uid;
        allow update: if request.auth.uid == uid && isUpdatingOnlyFollowingBackField();
      }
      
      match /complimentsSentNumbers/{followingPersonUid} {
        //Only the owner can create and read
        //can update if updating the noOfComplimentsSent
        allow read, create: if request.auth.uid == uid;
        allow update: if request.auth.uid == uid && request.resource.data.diff(resource.data).affectedKeys().hasAny(['noOfComplimentsSent', 'interestMeter']);
      }
      
      match /blocked/{blockedPersonUid} {
        //Only the user is authorised to read
        allow read: if request.auth.uid == uid;
        //Creation, updation and deletion is done by admin since
        //we are enforcing 48hrs rule for blocking and unBlocking
        allow write: if false;
      }
      
      match /blockedBy/{blockedByPersonUid} {
        //User is authorised to just read 
        //his blocked sub-collection
        allow read: if request.auth.uid == uid;
      }
      
      match /notificationToken/{tokenId} {
        //Only the user is authorised to read and write
        //to his followers sub-collection
        allow read, create, update: if request.auth.uid == uid;
        allow delete : if false;
      }

      match /autoAcceptFollowers/{uid} {
        //Only the user is authorised to read and write
        //to his followers sub-collection
        allow read, create, update: if request.auth.uid == uid;
        allow delete : if false;
      }
      
      match /Notifications/{randomId} {
        //User is authorised to create and read
        //to his Notifications sub-collection but not create
        allow read: if request.auth.uid == uid;
        allow update: if request.auth.uid == uid && isUpdatingOnlyWasClickedField();
        allow create: if request.auth.uid == uid && isCreatingOnlyNoOfNotificationsReceivedDoc();
        allow delete: if request.auth.uid == uid && isNotDeletingNoOfNotificationsReceivedDoc();
      }

     match /pokersForInsights/{pokerUid} {
        //poked and poker are allowed to read his pokers
        allow read: if request.auth.uid == uid || request.auth.uid == pokerUid;
        //only follower and poker are allowed to create a poker docs
        allow create: if request.auth.uid == pokerUid && isFollower()
        //delete will be done by CF only
     }


    function isCreatingOnlyNoOfNotificationsReceivedDoc() {
      return request.resource.data.keys().hasOnly(['noOfNotificationsReceived'])
    }

    function isNotDeletingNoOfNotificationsReceivedDoc() {
      return !resource.data.keys().hasOnly(['noOfNotificationsReceived'])
    }


    function isUpdatingOnlyWasClickedField() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['wasClicked'])
    }

    //custom function to check if client is trying to update anything other 
    //than likes or views field of the complimentSent doc
    function isWatcherUpdatingOnlyLikesOrViewsCounter() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['noOfLikes']) &&
      noOfLikesIsGreaterOrLessThanByOne() ||
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['noOfViews']) &&
      noOfViewsIsGreaterOrLessThanByOne();
    }

    //function to track if the complimentReceiver to trying to update the wasRead, senderBlocked or 
    //followingStatus Booleans in the ComplimentReceived Doc
    function isComplimentReceiverUpdatingWasReadOrComplimentBlockedOrFollowingStatusOrReceivedLikedField() {
      return resource.data.receiverUid == uid && 
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['complimentRead', 'senderBlocked', 'receiverLiked', 'followingStatus']);
      // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['senderBlocked']) ||
      // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['receiverLiked']) ||
      // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followingStatus']);
    }

    function isComplimentSenderUpdatingReceiverBlockedStatusOrSenderNameOrSenderUserNameOrSenderLikedField() {
      return resource.data.senderUid == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['receiverBlocked', 'senderName', 'senderLiked','senderUserName']);
    }

    //Check if the requested client is a follower
    function isFollower() {
      return exists(/databases/$(database)/documents/Users/$(uid)/followers/$(request.auth.uid)) 
    }

    //Check if the insight owner is updating ownerLiked field
    function isInsightOwnerUpdatingOwnerLikedOrNoOfLikesField() {
      return request.auth.uid == uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ownerLiked', 'noOfLikes']) &&
        noOfLikesIsGreaterOrLessThanByOne();
    }

    //Check if the mandatoryInsight owner is updating ownerLiked field, answer option selected
    // function isMandatoryInsightOwnerUpdatingOwnerLikedOrNoOfLikesOrAnswerOptionField() {
    //   return request.auth.uid == uid && 
    //     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ownerLiked', 'noOfLikes','answerOption']) &&
    //     noOfLikesIsGreaterOrLessThanByOneOrUnchanged();
    // }

        //The rules for insights sub coll
    match /insights/{randomInsightId} {
      //allow read for insight owners and the followers
      allow read: if request.auth.uid == uid
      || isFollower()

      //allow create for owners only
      allow create: if request.auth.uid == uid

      //allow update only if user or watcher is trying to update the likes or viewCounter fields
      allow update: if isWatcherUpdatingOnlyLikesOrViewsCounter() || isInsightOwnerUpdatingOwnerLikedOrNoOfLikesField();

      //allow delete insight by owner of the insight
      allow delete: if request.auth.uid == uid;
    }

    //The rules for mandatoryInsights sub coll
    match /mandatoryInsights/{randomInsightId} {
      //allow read for insight owners and the followers
      allow read: if request.auth.uid == uid
      || isFollower()

      //allow create for owners only
      allow create: if request.auth.uid == uid

      //allow update only if watcher is trying to update the likes or viewCounter fields
      //allow user to completely update the insight
      allow update: if isWatcherUpdatingOnlyLikesOrViewsCounter() || request.auth.uid == uid;

      //allow delete insight by owner of the insight
      allow delete: if false;
    }

    //The rules for insight likes sub coll
    match /insights/{randomInsightId}/insightLikes/{likerUid} {
    //allow read, create for owners and the followers
      allow read, create: if request.auth.uid == uid
        || isFollower()

        //allow delete to only the likers so users can unlike their own likes and cannot unlike for other users
        allow delete: if request.auth.uid == likerUid;
    }

    //The rules for complimentSender person doc
    match /complimentSenders/{senderUid} {
      //allow read for compliment receivers
      allow read: if request.auth.uid == uid;

      //only admin will create, delete & update these docs
      allow write: if false
    }

    //The rules for complimentsReceived Docs
    match /complimentSenders/{senderUid}/compliments/{randomComplimentId} {
      //allow read for compliment receivers
      allow read: if request.auth.uid == uid;

      //allow create for the followers
      // allow create: if exists(/databases/$(database)/documents/Users/$(uid)/followers/$(request.auth.uid))
      //compliments are sent and received via CF only so no one is allowed to create compliments
      allow create: if false

      //allow update only if trying to update the likes or viewCounter fields
      allow update: if isWatcherUpdatingOnlyLikesOrViewsCounter() ||
        isComplimentReceiverUpdatingWasReadOrComplimentBlockedOrFollowingStatusOrReceivedLikedField() ||
        isComplimentSenderUpdatingReceiverBlockedStatusOrSenderNameOrSenderUserNameOrSenderLikedField();

      //allow delete compliment to only the receiver and the sender
      allow delete: if request.auth.uid == uid ||
        request.auth.uid == resource.data.senderUid;
    }

   //The rules for complimentsReceivedLikes sub coll
   match  /complimentSenders/{senderUid}/compliments/{randomComplimentId}/complimentLikes/{likerUid} {
      //allow any logged in user to read the likers and add themselves as likers
      //users need the complimentId to read and add themselves as likers to that compliment
      //and since compliment rules are secure this rule will not be insecure as the compliment ID is secure
      allow read, create: if request.auth.uid != null;

      //allow delete to only the likers so users can unlike their own likes and cannot unlike for other users
      allow delete: if request.auth.uid == likerUid;
    }

    // //get complimentReceivedDocData
    // function getComplimentReceivedDocData(randomComplimentId) {
    //   return get(/databases/$(database)/documents/Users/$(request.data.receiverUid)/complimentsReceived/$(randomComplimentId)).data
    // }
    
    //End of Users/{uid} parent
    }


      //The rules for complimentsReceivedSubCollection
      //Using a collectionGroup query for retreving compliments sent
      //so some path wild card is added since according to firestore rules,
      //The collectioncomplimentsReceived can exist anywhere in the DB
			match /{somepath=**}/compliments/{randomComplimentId} {
        //Allow read permission to compliment receivers, followers of the receiver
        //and the sender of the compliment 
        //sender is already a follower but separate rule is added just in case the sender unfollows a person later
        allow read: if request.auth.uid == resource.data.receiverUid || 
        request.auth.uid == resource.data.senderUid ||
          exists(/databases/$(database)/documents/Users/$(resource.data.receiverUid)/followers/$(request.auth.uid));
      }

      //Experiment Collection users-t
      match /users-t/{userdIds} {
        //Users can read data about all other users
        allow read : if request.auth.uid in resource.data.followers || resource.data.following
      }

      //All users can read ComplimentIdeas
      match/UserFeedback/{ContentIdeas=**} {
        //everyone can read compliment ideas, only admins will create & write to this via console
        allow read: if request.auth.uid != null;
      }

  
  //allow logged in users to create reports on others content
  match/UserFeedback/Reports/{ReportContent=**} {
    allow create: if request.auth.uid != null;
  }

  //allow logged in users to create reports on other users
  match/UserFeedback/Reports/{ReportPerson=**} {
    allow create: if request.auth.uid != null;
  }

  //allow all logged in users to create deactivate account requests in their own document
  match /UserFeedback/Reports/DeactivateAccountRequests/{uid} {
    allow write: if request.auth.uid == uid;
  }

  //allow all logged in users to create feedback documents but dont allow them to view the feedback sent.
  match /UserFeedback/{Feedback=**} {
    allow create: if request.auth.uid != null;
  }

  //End of rules
  }
  
}